AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud formation stack for Revisions Next.js Application.

Mappings:
  ResourceTags:
    project-tag:
      project: "revisions"
  Role:
    LabRole:
      Arn: "arn:aws:iam::690277647156:role/LabRole"

Resources:
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RevisionsProjectApi
      Description: API Gateway for Revisions Project

  EmailSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: SendEmailTopic
      TopicName: SendEmailTopic

  LambdaSNSSubscribeFunction:    
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: LambdaSNSSubscribeFunction
      Handler: index.subscribe
      Runtime: python3.10
      Timeout: 30
      Role: arn:aws:iam::690277647156:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def subscribe(event, context):
              email = event['email']
              sns = boto3.client('sns')
              response = sns.subscribe(
                  TopicArn=os.environ['EMAIL_SNS_TOPIC_ARN'],
                  Protocol='email',
                  Endpoint=email,
                  Attributes={
                      'FilterPolicy': json.dumps({'email': [email]})
                  }
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Subscribed successfully')
              }
      Environment:
        Variables:
          EMAIL_SNS_TOPIC_ARN: !Ref EmailSNSTopic
  
  LambdaTestPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaSNSSubscribeFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*'

  SNSSubscribeGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: subscribe

  LambdaSNSSubscribePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaSNSSubscribeFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/subscribe'

  SNSSubscribeOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SNSSubscribeGatewayResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
  
  SNSSubscribeApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref SNSSubscribeGatewayResource
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSNSSubscribeFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: $input.json('$')
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true

  SendEmailLambdaFunction:    
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: SendEmailLambdaFunction
      Handler: index.sendEmail
      Runtime: python3.8
      Timeout: 30
      Role: arn:aws:iam::690277647156:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def sendEmail(event, context):
              email = event['email']
              message = event['message']
              subject = event['subject']
              sns = boto3.client('sns')
              response = sns.publish(
                  TopicArn=os.environ['EMAIL_SNS_TOPIC_ARN'],
                  Message=message,
                  Subject=subject,
                  MessageAttributes={
                      'email': {
                          'DataType': 'String',
                          'StringValue': email
                      }
                  }
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps('Email sent successfully')
              }
      Environment:
        Variables:
          EMAIL_SNS_TOPIC_ARN: !Ref EmailSNSTopic
  
  SendEmailLambdaTestPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SendEmailLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*'

  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: sendemail

  SendEmailLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref SendEmailLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/sendemail'
# Options method
  SendEmailOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true

  SendEmailApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: $input.json('$')
        RequestTemplates:
          application/json: $input.json('$')
      RequestParameters:
        method.request.querystring.name: false
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true

  EmailSNSSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: lambda
      TopicArn: !Ref EmailSNSTopic
      Endpoint: !GetAtt LambdaSNSSubscribeFunction.Arn

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - SNSSubscribeOptionsMethod
      - SNSSubscribeApiGatewayMethod
      - SendEmailOptionsMethod
      - SendEmailApiGatewayMethod  
      - PreSignedUrlApiGatewayMethod
      - PreSignedUrlApiGatewayOptionsMethod    
    Properties:
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'prod'

  # S3 bucket for storing images and other files
  RevisionsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: revisionsb00965752
      VersioningConfiguration:
        Status: Enabled
  
  RevisionsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RevisionsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
              # - s3:PutObject
              # - s3:DeleteObject
            Effect: Allow
            Resource: !Join
              - ''
              - - !GetAtt RevisionsBucket.Arn
                - /* 
            Principal: 
              AWS: arn:aws:iam::690277647156:role/LabRole

  # Pre-signed URL Lambda function for getting pre-signed URLs for getting the images
  PreSignedUrlLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: PreSignedUrlLambdaFunction
      Handler: index.getPresignedUrl
      Runtime: python3.12
      Timeout: 30
      Role: arn:aws:iam::690277647156:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def getPresignedUrl(event, context):
              s3 = boto3.client('s3')
              bucket = os.environ['BUCKET_NAME']
              key = event['key']
              url = s3.generate_presigned_url(
                  ClientMethod='get_object',
                  Params={
                      'Bucket': bucket,
                      'Key': key
                  }
              )
              return {
                  'statusCode': 200,
                  'body': json.dumps(url)
              }
      Environment:
        Variables:
          BUCKET_NAME: !Ref RevisionsBucket

  ApiGatewayPreSignedUrlResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: presignedurl

  PreSignedUrlApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayPreSignedUrlResource
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreSignedUrlLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: $input.json('$')
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
  
  PreSignedUrlApiGatewayOptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayPreSignedUrlResource
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'"
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            "method.response.header.Access-Control-Allow-Headers": true
            "method.response.header.Access-Control-Allow-Methods": true
            "method.response.header.Access-Control-Allow-Origin": true
    # Log Group for ECS Tasks
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
      RetentionInDays: 7
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: revisions-cluster
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: nextjs-task
      Cpu: '1024'
      Memory: '2048'
      RuntimePlatform:
        CpuArchitecture: ARM64
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: arn:aws:iam::690277647156:role/LabRole
      ContainerDefinitions:
        - Name: nextjs-container
          Image: amandesai05/revisions-nextjs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 3000
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: nextjs-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: nextjs-container
          ContainerPort: 3000
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - subnet-087788b48f12bba4c # us-east-1a
            - subnet-09cd0552f11503aac # us-east-1b
          SecurityGroups:
            - !Ref SecurityGroup
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySecurityGroup
      GroupDescription: A security group for my instance
      VpcId: vpc-0d0ab6104c1862766
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - subnet-087788b48f12bba4c # us-east-1a
        - subnet-09cd0552f11503aac # us-east-1b
      SecurityGroups:
        - !Ref SecurityGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3000
      Protocol: HTTP
      VpcId: vpc-0d0ab6104c1862766
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '404'
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:690277647156:certificate/ddcc8991-6cdb-4155-90db-03a49b60809e
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z066413417DELFCNHWLVG
      Name: revisions.tech
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
  WildcardRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z066413417DELFCNHWLVG
      Name: '*.revisions.tech'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  RevisionsBucket:
    Description: Cloudfront Origin - S3 Bucket
    Value: !Ref RevisionsBucket
  RevisionsBucketPolicy:
    Description: S3 Bucket Policy
    Value: !Ref RevisionsBucketPolicy
  SendEmailApiUrl:
    Description: URL of the API endpoint
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/sendemail'
  SubscribeApiUrl:
    Description: URL of the API endpoint
    Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/subscribe'
  LoadBalancer:
    Description: Load Balancer
    Value: !Ref LoadBalancer