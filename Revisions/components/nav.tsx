"use client";

import Link from "next/link";
import {
  ArrowLeft,
  PaletteIcon,
  Edit3,
  Globe,
  Layout,
  LayoutDashboard,
  Menu,
  Settings,
  FileCode,
  Github,
} from "lucide-react";
import {
  useParams,
  usePathname,
  useSelectedLayoutSegments,
} from "next/navigation";
import { ReactNode, useEffect, useMemo, useState } from "react";
import { getOrganisationFromPostId } from "@/lib/actions";
import Image from "next/image";

export default function Nav({ children }: { children: ReactNode }) {
  const segments = useSelectedLayoutSegments();
  const { id } = useParams() as { id?: string };

  const [organisationId, setOrganisationId] = useState<string | null>();

  useEffect(() => {
    if (segments[0] === "post" && id && !organisationId) {
      getOrganisationFromPostId(id).then((id) => {
        setOrganisationId(id);
      });
    }
  }, [segments, id, organisationId]);

  const tabs = useMemo(() => {
    if (segments[0] === "post" && id) {
      return [
        {
          name: "Back to All Posts",
          href: organisationId ? `/` : "/organisations",
          icon: <ArrowLeft width={18} />,
        },
        {
          name: "Editor",
          href: `/post/${id}`,
          isActive: segments.length === 2,
          icon: <Edit3 width={18} />,
        },
        {
          name: "Settings",
          href: `/post/${id}/settings`,
          isActive: segments.includes("settings"),
          icon: <Settings width={18} />,
        },
      ];
    }
    return [
      {
        name: "Dashboard",
        href: "/",
        isActive: segments.length === 0,
        icon: <LayoutDashboard width={18} />,
      },
      {
        name: "Organisations",
        href: "/organisations",
        isActive: segments[0] === "organisations",
        icon: <Globe width={18} />,
      },
      {
        name: "Settings",
        href: "/settings",
        isActive: segments[0] === "settings",
        icon: <Settings width={18} />,
      },
    ];
  }, [segments, id, organisationId]);

  const [showSidebar, setShowSidebar] = useState(false);

  const pathname = usePathname();

  useEffect(() => {
    // hide sidebar on path change
    setShowSidebar(false);
  }, [pathname]);

  return (
    <>
      <button
        className={`fixed z-20 ${
          // left align for Editor, right align for other pages
          segments[0] === "post" && segments.length === 2 && !showSidebar
            ? "left-5 top-5"
            : "right-5 top-7"
          } sm:hidden`}
        onClick={() => setShowSidebar(!showSidebar)}
      >
        <Menu width={20} />
      </button>
      <div
        className={`transform ${showSidebar ? "w-full translate-x-0" : "-translate-x-full"
          } fixed z-10 flex h-full flex-col justify-between border-r border-stone-200 bg-stone-100 p-4 transition-all dark:border-stone-700 dark:bg-stone-900 sm:w-60 sm:translate-x-0`}
      >
        <div className="grid gap-2">
          <div className="flex items-center space-x-2 rounded-lg px-2 py-1.5">
            <Link
              href="/"
              className="rounded-lg p-2 hover:bg-stone-200 dark:hover:bg-stone-700"
            >
              <svg
                width="1488"
                height="351"
                viewBox="0 0 1488 351"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                className="h-8 w-32 text-black dark:text-white"
              >
                <path
                  d="M250 100.034C250.004 91.266 247.702 82.651 243.326 75.053C238.95 67.456 232.652 61.142 225.066 56.747C217.479 52.351 208.87 50.027 200.102 50.009C191.334 49.99 182.716 52.277 175.111 56.641C167.506 61.005 161.182 67.292 156.774 74.871C152.365 82.45 150.027 91.055 149.994 99.823C149.961 108.591 152.234 117.213 156.585 124.826C160.936 132.438 167.213 138.772 174.784 143.193C172.995 165.913 159.096 172.101 116.187 181.024C102.311 183.899 88.1149 186.844 75.0049 191.907V93.307C84.5369 87.803 91.9879 79.308 96.1999 69.138C100.412 58.969 101.151 47.694 98.3019 37.061C95.4539 26.429 89.1759 17.0339 80.4429 10.333C71.7099 3.6321 61.0109 0 50.0029 0C38.9959 0 28.2959 3.6321 19.5629 10.333C10.8299 17.0339 4.55293 26.429 1.70393 37.061C-1.14507 47.694 -0.406085 58.969 3.80592 69.138C8.01891 79.308 15.4689 87.803 25.0019 93.307V256.77C15.4829 262.267 8.0409 270.746 3.8259 280.897C-0.389096 291.047 -1.14207 302.304 1.68293 312.926C4.50893 323.548 10.7549 332.943 19.4559 339.658C28.1579 346.373 38.8289 350.034 49.8199 350.075C60.8109 350.116 71.5089 346.535 80.2599 339.885C89.0109 333.234 95.3279 323.886 98.2319 313.286C101.136 302.685 100.467 291.423 96.3279 281.241C92.1889 271.059 84.8099 262.525 75.3329 256.958C77.1999 242.895 87.8339 237.949 126.32 229.987C147.751 225.558 169.901 220.971 188.652 208.932C211.31 194.415 223.444 172.382 224.873 143.388C232.506 139.011 238.848 132.698 243.259 125.086C247.671 117.474 249.996 108.832 250 100.034ZM49.9879 25.0294C54.9319 25.0294 59.7659 26.4957 63.8779 29.2429C67.9889 31.9901 71.1939 35.895 73.0859 40.463C74.9779 45.032 75.4729 50.059 74.5089 54.909C73.5439 59.758 71.1629 64.213 67.6659 67.71C64.1699 71.206 59.7149 73.587 54.8649 74.552C50.0149 75.517 44.9879 75.022 40.4199 73.129C35.8509 71.237 31.9469 68.033 29.1989 63.921C26.4519 59.81 24.9859 54.976 24.9859 50.031C24.9859 43.4 27.6199 37.041 32.3089 32.3522C36.9969 27.6635 43.3569 25.0294 49.9879 25.0294ZM49.9879 325.048C45.0429 325.048 40.2089 323.582 36.0969 320.835C31.9859 318.087 28.7809 314.183 26.8889 309.614C24.9969 305.046 24.5019 300.019 25.4659 295.169C26.4309 290.319 28.8119 285.864 32.3089 282.368C35.8049 278.871 40.2599 276.49 45.1099 275.525C49.9599 274.561 54.9869 275.056 59.5549 276.948C64.1239 278.84 68.0279 282.045 70.7759 286.156C73.5229 290.268 74.9889 295.102 74.9889 300.047C74.9889 306.677 72.3549 313.037 67.6659 317.725C62.9779 322.414 56.6179 325.048 49.9879 325.048ZM199.997 125.036C195.052 125.036 190.218 123.569 186.107 120.822C181.995 118.075 178.791 114.17 176.898 109.602C175.006 105.033 174.511 100.006 175.476 95.157C176.44 90.307 178.822 85.852 182.318 82.355C185.815 78.859 190.269 76.478 195.119 75.513C199.969 74.548 204.996 75.043 209.565 76.936C214.133 78.828 218.038 82.032 220.785 86.144C223.532 90.255 224.998 95.089 224.998 100.034C224.998 106.665 222.364 113.024 217.676 117.713C212.987 122.402 206.628 125.036 199.997 125.036Z"
                  fill="currentColor"
                />
                <path
                  d="M343.004 287.089C325.888 287.089 311.115 283.716 298.686 276.969C286.328 270.151 276.811 260.456 270.135 247.885C263.53 235.243 260.227 220.222 260.227 202.821C260.227 185.918 263.565 171.145 270.241 158.503C276.918 145.79 286.328 135.918 298.473 128.886C310.618 121.784 324.929 118.233 341.406 118.233C353.054 118.233 363.707 120.044 373.366 123.666C383.026 127.288 391.371 132.651 398.402 139.753C405.433 146.855 410.902 155.626 414.808 166.067C418.714 176.436 420.668 188.332 420.668 201.756V214.753H278.445V184.497H372.195C372.124 178.957 370.81 174.021 368.253 169.689C365.696 165.357 362.18 161.983 357.706 159.568C353.303 157.082 348.224 155.839 342.472 155.839C336.648 155.839 331.428 157.153 326.811 159.781C322.195 162.338 318.537 165.854 315.838 170.328C313.139 174.732 311.719 179.739 311.577 185.349V216.138C311.577 222.814 312.891 228.673 315.518 233.716C318.146 238.687 321.875 242.558 326.705 245.328C331.534 248.098 337.287 249.483 343.963 249.483C348.58 249.483 352.77 248.844 356.534 247.565C360.298 246.287 363.53 244.405 366.229 241.919C368.928 239.433 370.952 236.379 372.301 232.757L420.135 234.142C418.146 244.866 413.778 254.206 407.031 262.161C400.355 270.044 391.584 276.187 380.717 280.591C369.851 284.923 357.28 287.089 343.004 287.089ZM601.616 120.364L545.472 284H485.813L429.776 120.364H484.641L514.79 233.077H516.495L546.751 120.364H601.616ZM621.59 284V120.364H673.69V284H621.59ZM647.69 101.294C640.38 101.294 634.09 98.879 628.84 94.05C623.58 89.149 620.952 83.254 620.952 76.365C620.952 69.547 623.58 63.723 628.84 58.893C634.09 53.993 640.38 51.543 647.69 51.543C655.08 51.543 661.36 53.993 666.55 58.893C671.8 63.723 674.43 69.547 674.43 76.365C674.43 83.254 671.8 89.149 666.55 94.05C661.36 98.879 655.08 101.294 647.69 101.294ZM849.71 170.328L801.87 171.607C801.38 168.197 800.03 165.179 797.82 162.551C795.62 159.852 792.75 157.757 789.2 156.266C785.72 154.703 781.67 153.922 777.05 153.922C771.01 153.922 765.86 155.129 761.6 157.544C757.41 159.959 755.35 163.226 755.42 167.345C755.35 170.541 756.63 173.311 759.26 175.655C761.96 177.999 766.75 179.881 773.64 181.301L805.18 187.267C821.51 190.392 833.66 195.577 841.61 202.821C849.64 210.065 853.68 219.653 853.76 231.585C853.68 242.807 850.35 252.572 843.74 260.882C837.21 269.192 828.26 275.655 816.89 280.271C805.53 284.817 792.53 287.089 777.9 287.089C754.54 287.089 736.11 282.295 722.61 272.707C709.19 263.048 701.52 250.122 699.6 233.929L751.06 232.651C752.19 238.616 755.14 243.162 759.9 246.287C764.66 249.412 770.73 250.974 778.12 250.974C784.79 250.974 790.23 249.732 794.42 247.246C798.61 244.76 800.74 241.457 800.81 237.338C800.74 233.645 799.1 230.697 795.91 228.496C792.71 226.223 787.7 224.447 780.89 223.169L752.33 217.736C735.93 214.753 723.71 209.249 715.69 201.223C707.66 193.126 703.68 182.828 703.76 170.328C703.68 159.391 706.6 150.051 712.49 142.31C718.39 134.497 726.77 128.531 737.63 124.412C748.5 120.293 761.32 118.233 776.09 118.233C798.25 118.233 815.72 122.885 828.51 132.189C841.29 141.422 848.36 154.135 849.71 170.328ZM879.4 284V120.364H931.5V284H879.4ZM905.5 101.294C898.19 101.294 891.9 98.879 886.65 94.05C881.39 89.149 878.76 83.254 878.76 76.365C878.76 69.547 881.39 63.723 886.65 58.893C891.9 53.993 898.19 51.543 905.5 51.543C912.89 51.543 919.18 53.993 924.36 58.893C929.62 63.723 932.24 69.547 932.24 76.365C932.24 83.254 929.62 89.149 924.36 94.05C919.18 98.879 912.89 101.294 905.5 101.294ZM1041.04 287.089C1023.85 287.089 1009.08 283.574 996.72 276.543C984.44 269.44 974.96 259.568 968.28 246.926C961.67 234.213 958.37 219.476 958.37 202.714C958.37 185.882 961.67 171.145 968.28 158.503C974.96 145.79 984.44 135.918 996.72 128.886C1009.08 121.784 1023.85 118.233 1041.04 118.233C1058.23 118.233 1072.97 121.784 1085.25 128.886C1097.61 135.918 1107.09 145.79 1113.7 158.503C1120.37 171.145 1123.71 185.882 1123.71 202.714C1123.71 219.476 1120.37 234.213 1113.7 246.926C1107.09 259.568 1097.61 269.44 1085.25 276.543C1072.97 283.574 1058.23 287.089 1041.04 287.089ZM1041.36 247.778C1047.61 247.778 1052.9 245.861 1057.24 242.026C1061.57 238.19 1064.87 232.864 1067.14 226.045C1069.49 219.227 1070.66 211.344 1070.66 202.395C1070.66 193.304 1069.49 185.349 1067.14 178.531C1064.87 171.713 1061.57 166.386 1057.24 162.551C1052.9 158.716 1047.61 156.798 1041.36 156.798C1034.9 156.798 1029.43 158.716 1024.96 162.551C1020.55 166.386 1017.18 171.713 1014.83 178.531C1012.56 185.349 1011.43 193.304 1011.43 202.395C1011.43 211.344 1012.56 219.227 1014.83 226.045C1017.18 232.864 1020.55 238.19 1024.96 242.026C1029.43 245.861 1034.9 247.778 1041.36 247.778ZM1202.49 190.676V284H1150.4V120.364H1199.94V150.406H1201.75C1205.37 140.392 1211.55 132.544 1220.29 126.862C1229.02 121.109 1239.43 118.233 1251.5 118.233C1263.01 118.233 1272.98 120.825 1281.44 126.01C1289.96 131.124 1296.56 138.297 1301.25 147.53C1306.01 156.692 1308.35 167.416 1308.28 179.703V284H1256.19V189.93C1256.26 180.839 1253.95 173.737 1249.26 168.624C1244.65 163.51 1238.22 160.953 1229.98 160.953C1224.51 160.953 1219.68 162.161 1215.49 164.575C1211.37 166.919 1208.18 170.293 1205.9 174.696C1203.7 179.099 1202.57 184.426 1202.49 190.676ZM1483.4 170.328L1435.56 171.607C1435.07 168.197 1433.72 165.179 1431.52 162.551C1429.31 159.852 1426.44 157.757 1422.89 156.266C1419.41 154.703 1415.36 153.922 1410.74 153.922C1404.71 153.922 1399.56 155.129 1395.29 157.544C1391.1 159.959 1389.04 163.226 1389.12 167.345C1389.04 170.541 1390.32 173.311 1392.95 175.655C1395.65 177.999 1400.44 179.881 1407.33 181.301L1438.87 187.267C1455.2 190.392 1467.35 195.577 1475.3 202.821C1483.33 210.065 1487.38 219.653 1487.45 231.585C1487.38 242.807 1484.04 252.572 1477.43 260.882C1470.9 269.192 1461.95 275.655 1450.59 280.271C1439.22 284.817 1426.23 287.089 1411.59 287.089C1388.23 287.089 1369.8 282.295 1356.3 272.707C1342.88 263.048 1335.21 250.122 1333.29 233.929L1384.75 232.651C1385.88 238.616 1388.83 243.162 1393.59 246.287C1398.35 249.412 1404.42 250.974 1411.81 250.974C1418.48 250.974 1423.92 249.732 1428.11 247.246C1432.3 244.76 1434.43 241.457 1434.5 237.338C1434.43 233.645 1432.79 230.697 1429.6 228.496C1426.4 226.223 1421.4 224.447 1414.58 223.169L1386.03 217.736C1369.62 214.753 1357.4 209.249 1349.38 201.223C1341.35 193.126 1337.38 182.828 1337.45 170.328C1337.38 159.391 1340.29 150.051 1346.18 142.31C1352.08 134.497 1360.46 128.531 1371.32 124.412C1382.19 120.293 1395.01 118.233 1409.78 118.233C1431.94 118.233 1449.41 122.885 1462.2 132.189C1474.98 141.422 1482.05 154.135 1483.4 170.328Z"
                  fill="currentColor"
                />
              </svg>
            </Link>
          </div>
          <div className="grid gap-1">
            {tabs.map(({ name, href, isActive, icon }) => (
              <Link
                key={name}
                href={href}
                className={`flex items-center space-x-3 ${isActive ? "bg-stone-200 text-black dark:bg-stone-700" : ""
                  } rounded-lg px-2 py-1.5 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800`}
              >
                {icon}
                <span className="text-sm font-medium">{name}</span>
              </Link>
            ))}
          </div>
        </div>
        <div>
          <div className="grid gap-1">
            <ThemeButton />
          </div>
          <div className="my-2 border-t border-stone-200 dark:border-stone-700" />
          {children}
        </div>
      </div>
    </>
  );
}

function ThemeButton() {
  const [mode, setMode] = useState<"light" | "dark" | "system">("light");

  const toggleMode = (newMode: string) => {
    setMode(newMode as "light" | "dark" | "system");
    localStorage.setItem("theme", newMode);

    if (newMode === "system") {
      document.documentElement.classList.remove("dark");
      return;
    }

    document.documentElement.classList.add("dark");

    if (newMode === "dark") {
      document.documentElement.classList.add("dark");
    }

    if (newMode === "light") {
      document.documentElement.classList.remove("dark");
    }

    document.documentElement.classList.add("transition");

    window.setTimeout(() => {
      document.documentElement.classList.remove("transition");
    }, 1000);

    return;
  };

  useEffect(() => {
    const localTheme = localStorage.getItem("theme");
    if (localTheme) {
      toggleMode(localTheme);
    }
  }, []);

  return (
    <div className="flex items-center justify-between rounded-lg px-2 py-1.5 transition-all duration-150 ease-in-out hover:bg-stone-200 active:bg-stone-300 dark:text-white dark:hover:bg-stone-700 dark:active:bg-stone-800">
      <div className="flex items-center space-x-3">
        <PaletteIcon width={18} />
        <span className="text-sm font-medium">Theme</span>
      </div>
      <div className="flex items-center space-x-3">
        <button
          className={`h-4 w-4 rounded-full border-2 border-black bg-stone-200 transition-all duration-150 ease-in-out`}
          onClick={() => toggleMode("light")}
        />
        <button
          className={`black h-4 w-4 rounded-full border-2 border-white transition-all duration-150 ease-in-out`}
          onClick={() => toggleMode("dark")}
        />
        <button
          className={`h-4 w-4 rounded-full transition-all duration-150 ease-in-out ${mode === "system" ? "bg black" : "bg-stone-200 dark:bg-stone-700"
            }`}
          onClick={() => toggleMode("system")}
        />
      </div>
    </div>
  );
}
